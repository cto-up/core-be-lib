// Package core provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package core

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for ListTenantConfigsParamsOrder.
const (
	ListTenantConfigsParamsOrderAsc  ListTenantConfigsParamsOrder = "asc"
	ListTenantConfigsParamsOrderDesc ListTenantConfigsParamsOrder = "desc"
)

// Defines values for ListRolesParamsOrder.
const (
	ListRolesParamsOrderAsc  ListRolesParamsOrder = "asc"
	ListRolesParamsOrderDesc ListRolesParamsOrder = "desc"
)

// Defines values for ListUsersParamsOrder.
const (
	ListUsersParamsOrderAsc  ListUsersParamsOrder = "asc"
	ListUsersParamsOrderDesc ListUsersParamsOrder = "desc"
)

// Defines values for UpdateUserStatusJSONBodyName.
const (
	UpdateUserStatusJSONBodyNameDISABLED      UpdateUserStatusJSONBodyName = "DISABLED"
	UpdateUserStatusJSONBodyNameEMAILVERIFIED UpdateUserStatusJSONBodyName = "EMAIL_VERIFIED"
)

// Defines values for ListClientApplicationsParamsOrder.
const (
	ListClientApplicationsParamsOrderAsc  ListClientApplicationsParamsOrder = "asc"
	ListClientApplicationsParamsOrderDesc ListClientApplicationsParamsOrder = "desc"
)

// Defines values for ListAPITokensParamsOrder.
const (
	ListAPITokensParamsOrderAsc  ListAPITokensParamsOrder = "asc"
	ListAPITokensParamsOrderDesc ListAPITokensParamsOrder = "desc"
)

// Defines values for ListGlobalConfigsParamsOrder.
const (
	ListGlobalConfigsParamsOrderAsc  ListGlobalConfigsParamsOrder = "asc"
	ListGlobalConfigsParamsOrderDesc ListGlobalConfigsParamsOrder = "desc"
)

// Defines values for ListTenantsParamsOrder.
const (
	ListTenantsParamsOrderAsc  ListTenantsParamsOrder = "asc"
	ListTenantsParamsOrderDesc ListTenantsParamsOrder = "desc"
)

// Defines values for ListUsersFromSuperAdminParamsOrder.
const (
	ListUsersFromSuperAdminParamsOrderAsc  ListUsersFromSuperAdminParamsOrder = "asc"
	ListUsersFromSuperAdminParamsOrderDesc ListUsersFromSuperAdminParamsOrder = "desc"
)

// Defines values for UpdateUserStatusFromSuperAdminJSONBodyName.
const (
	UpdateUserStatusFromSuperAdminJSONBodyNameDISABLED      UpdateUserStatusFromSuperAdminJSONBodyName = "DISABLED"
	UpdateUserStatusFromSuperAdminJSONBodyNameEMAILVERIFIED UpdateUserStatusFromSuperAdminJSONBodyName = "EMAIL_VERIFIED"
)

// ListTenantConfigsParams defines parameters for ListTenantConfigs.
type ListTenantConfigsParams struct {
	// Page page number
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PageSize maximum number of results to return
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// SortBy field to sort by
	SortBy *string `form:"sortBy,omitempty" json:"sortBy,omitempty"`

	// Order sort order
	Order *ListTenantConfigsParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Q starts with
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Detail basic or full
	Detail *string `form:"detail,omitempty" json:"detail,omitempty"`
}

// ListTenantConfigsParamsOrder defines parameters for ListTenantConfigs.
type ListTenantConfigsParamsOrder string

// AddTenantConfigJSONBody defines parameters for AddTenantConfig.
type AddTenantConfigJSONBody struct {
	Name  string  `json:"name"`
	Value *string `json:"value,omitempty"`
}

// UpdateTenantConfigJSONBody defines parameters for UpdateTenantConfig.
type UpdateTenantConfigJSONBody struct {
	Id    openapi_types.UUID `json:"id"`
	Name  string             `json:"name"`
	Value *string            `json:"value,omitempty"`
}

// UpdateMeProfileJSONBody defines parameters for UpdateMeProfile.
type UpdateMeProfileJSONBody struct {
	About                *string   `json:"about,omitempty"`
	BackgroundPictureURL *string   `json:"backgroundPictureURL,omitempty"`
	Interests            *[]string `json:"interests,omitempty"`
	Name                 string    `json:"name"`
	PictureURL           *string   `json:"pictureURL,omitempty"`
	Skills               *[]string `json:"skills,omitempty"`
	SocialMedias         *[]string `json:"socialMedias,omitempty"`
	Title                *string   `json:"title,omitempty"`
}

// UploadProfilePictureMultipartBody defines parameters for UploadProfilePicture.
type UploadProfilePictureMultipartBody struct {
	FileName *openapi_types.File `json:"fileName,omitempty"`
}

// ListRolesParams defines parameters for ListRoles.
type ListRolesParams struct {
	// Page page number
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PageSize maximum number of results to return
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// SortBy field to sort by
	SortBy *string `form:"sortBy,omitempty" json:"sortBy,omitempty"`

	// Order sort order
	Order *ListRolesParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Q starts with
	Q *string `form:"q,omitempty" json:"q,omitempty"`
}

// ListRolesParamsOrder defines parameters for ListRoles.
type ListRolesParamsOrder string

// ListUsersParams defines parameters for ListUsers.
type ListUsersParams struct {
	// Page page number
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PageSize maximum number of results to return
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// SortBy field to sort by
	SortBy *string `form:"sortBy,omitempty" json:"sortBy,omitempty"`

	// Order sort order
	Order *ListUsersParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Q starts with
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Detail basic or full (default to full)
	Detail *string `form:"detail,omitempty" json:"detail,omitempty"`
}

// ListUsersParamsOrder defines parameters for ListUsers.
type ListUsersParamsOrder string

// ResetPasswordRequestByAdminJSONBody defines parameters for ResetPasswordRequestByAdmin.
type ResetPasswordRequestByAdminJSONBody struct {
	// Email email
	Email openapi_types.Email `json:"email"`
}

// UpdateUserStatusJSONBody defines parameters for UpdateUserStatus.
type UpdateUserStatusJSONBody struct {
	Name  UpdateUserStatusJSONBodyName `json:"name"`
	Value bool                         `json:"value"`
}

// UpdateUserStatusJSONBodyName defines parameters for UpdateUserStatus.
type UpdateUserStatusJSONBodyName string

// ResetPasswordRequestJSONBody defines parameters for ResetPasswordRequest.
type ResetPasswordRequestJSONBody struct {
	// Email email
	Email openapi_types.Email `json:"email"`
}

// ListClientApplicationsParams defines parameters for ListClientApplications.
type ListClientApplicationsParams struct {
	// Page page number
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PageSize maximum number of results to return
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// SortBy field to sort by
	SortBy *string `form:"sortBy,omitempty" json:"sortBy,omitempty"`

	// Order sort order
	Order *ListClientApplicationsParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Q search query
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// IncludeInactive include inactive applications
	IncludeInactive *bool `form:"includeInactive,omitempty" json:"includeInactive,omitempty"`
}

// ListClientApplicationsParamsOrder defines parameters for ListClientApplications.
type ListClientApplicationsParamsOrder string

// ListAPITokensParams defines parameters for ListAPITokens.
type ListAPITokensParams struct {
	// Page page number
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PageSize maximum number of results to return
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// SortBy field to sort by
	SortBy *string `form:"sortBy,omitempty" json:"sortBy,omitempty"`

	// Order sort order
	Order *ListAPITokensParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// IncludeRevoked include revoked tokens
	IncludeRevoked *bool `form:"includeRevoked,omitempty" json:"includeRevoked,omitempty"`

	// IncludeExpired include expired tokens
	IncludeExpired *bool `form:"includeExpired,omitempty" json:"includeExpired,omitempty"`
}

// ListAPITokensParamsOrder defines parameters for ListAPITokens.
type ListAPITokensParamsOrder string

// GetAPITokenAuditLogsParams defines parameters for GetAPITokenAuditLogs.
type GetAPITokenAuditLogsParams struct {
	// Page page number
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PageSize maximum number of results to return
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`
}

// ListGlobalConfigsParams defines parameters for ListGlobalConfigs.
type ListGlobalConfigsParams struct {
	// Page page number
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PageSize maximum number of results to return
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// SortBy field to sort by
	SortBy *string `form:"sortBy,omitempty" json:"sortBy,omitempty"`

	// Order sort order
	Order *ListGlobalConfigsParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Q starts with
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Detail basic or full
	Detail *string `form:"detail,omitempty" json:"detail,omitempty"`
}

// ListGlobalConfigsParamsOrder defines parameters for ListGlobalConfigs.
type ListGlobalConfigsParamsOrder string

// AddGlobalConfigJSONBody defines parameters for AddGlobalConfig.
type AddGlobalConfigJSONBody struct {
	Name  string  `json:"name"`
	Value *string `json:"value,omitempty"`
}

// UpdateGlobalConfigJSONBody defines parameters for UpdateGlobalConfig.
type UpdateGlobalConfigJSONBody struct {
	Id    openapi_types.UUID `json:"id"`
	Name  string             `json:"name"`
	Value *string            `json:"value,omitempty"`
}

// ListTenantsParams defines parameters for ListTenants.
type ListTenantsParams struct {
	// Page page number
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PageSize maximum number of results to return
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// SortBy field to sort by
	SortBy *string `form:"sortBy,omitempty" json:"sortBy,omitempty"`

	// Order sort order
	Order *ListTenantsParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Q starts with
	Q *string `form:"q,omitempty" json:"q,omitempty"`
}

// ListTenantsParamsOrder defines parameters for ListTenants.
type ListTenantsParamsOrder string

// ListUsersFromSuperAdminParams defines parameters for ListUsersFromSuperAdmin.
type ListUsersFromSuperAdminParams struct {
	// Page page number
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PageSize maximum number of results to return
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// SortBy field to sort by
	SortBy *string `form:"sortBy,omitempty" json:"sortBy,omitempty"`

	// Order sort order
	Order *ListUsersFromSuperAdminParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Q starts with
	Q *string `form:"q,omitempty" json:"q,omitempty"`
}

// ListUsersFromSuperAdminParamsOrder defines parameters for ListUsersFromSuperAdmin.
type ListUsersFromSuperAdminParamsOrder string

// ResetPasswordRequestBySuperAdminJSONBody defines parameters for ResetPasswordRequestBySuperAdmin.
type ResetPasswordRequestBySuperAdminJSONBody struct {
	// Email email
	Email openapi_types.Email `json:"email"`
}

// UpdateUserStatusFromSuperAdminJSONBody defines parameters for UpdateUserStatusFromSuperAdmin.
type UpdateUserStatusFromSuperAdminJSONBody struct {
	Name  UpdateUserStatusFromSuperAdminJSONBodyName `json:"name"`
	Value bool                                       `json:"value"`
}

// UpdateUserStatusFromSuperAdminJSONBodyName defines parameters for UpdateUserStatusFromSuperAdmin.
type UpdateUserStatusFromSuperAdminJSONBodyName string

// AddTenantConfigJSONRequestBody defines body for AddTenantConfig for application/json ContentType.
type AddTenantConfigJSONRequestBody AddTenantConfigJSONBody

// UpdateTenantConfigJSONRequestBody defines body for UpdateTenantConfig for application/json ContentType.
type UpdateTenantConfigJSONRequestBody UpdateTenantConfigJSONBody

// UpdateMeProfileJSONRequestBody defines body for UpdateMeProfile for application/json ContentType.
type UpdateMeProfileJSONRequestBody UpdateMeProfileJSONBody

// UploadProfilePictureMultipartRequestBody defines body for UploadProfilePicture for multipart/form-data ContentType.
type UploadProfilePictureMultipartRequestBody UploadProfilePictureMultipartBody

// AddRoleJSONRequestBody defines body for AddRole for application/json ContentType.
type AddRoleJSONRequestBody = NewRole

// UpdateRoleJSONRequestBody defines body for UpdateRole for application/json ContentType.
type UpdateRoleJSONRequestBody = Role

// UpdateTenantProfileJSONRequestBody defines body for UpdateTenantProfile for application/json ContentType.
type UpdateTenantProfileJSONRequestBody = TenantProfile

// AddUserJSONRequestBody defines body for AddUser for application/json ContentType.
type AddUserJSONRequestBody = NewUser

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = User

// ResetPasswordRequestByAdminJSONRequestBody defines body for ResetPasswordRequestByAdmin for application/json ContentType.
type ResetPasswordRequestByAdminJSONRequestBody ResetPasswordRequestByAdminJSONBody

// UpdateUserStatusJSONRequestBody defines body for UpdateUserStatus for application/json ContentType.
type UpdateUserStatusJSONRequestBody UpdateUserStatusJSONBody

// ResetPasswordRequestJSONRequestBody defines body for ResetPasswordRequest for application/json ContentType.
type ResetPasswordRequestJSONRequestBody ResetPasswordRequestJSONBody

// CreateClientApplicationJSONRequestBody defines body for CreateClientApplication for application/json ContentType.
type CreateClientApplicationJSONRequestBody = NewClientApplication

// UpdateClientApplicationJSONRequestBody defines body for UpdateClientApplication for application/json ContentType.
type UpdateClientApplicationJSONRequestBody = NewClientApplication

// CreateAPITokenJSONRequestBody defines body for CreateAPIToken for application/json ContentType.
type CreateAPITokenJSONRequestBody = NewAPIToken

// RevokeAPITokenJSONRequestBody defines body for RevokeAPIToken for application/json ContentType.
type RevokeAPITokenJSONRequestBody = APITokenRevoke

// AddGlobalConfigJSONRequestBody defines body for AddGlobalConfig for application/json ContentType.
type AddGlobalConfigJSONRequestBody AddGlobalConfigJSONBody

// UpdateGlobalConfigJSONRequestBody defines body for UpdateGlobalConfig for application/json ContentType.
type UpdateGlobalConfigJSONRequestBody UpdateGlobalConfigJSONBody

// UpdateTenantFeaturesJSONRequestBody defines body for UpdateTenantFeatures for application/json ContentType.
type UpdateTenantFeaturesJSONRequestBody = TenantFeatures

// AddTenantJSONRequestBody defines body for AddTenant for application/json ContentType.
type AddTenantJSONRequestBody = NewTenant

// UpdateTenantJSONRequestBody defines body for UpdateTenant for application/json ContentType.
type UpdateTenantJSONRequestBody = Tenant

// AddUserFromSuperAdminJSONRequestBody defines body for AddUserFromSuperAdmin for application/json ContentType.
type AddUserFromSuperAdminJSONRequestBody = NewUser

// UpdateUserFromSuperAdminJSONRequestBody defines body for UpdateUserFromSuperAdmin for application/json ContentType.
type UpdateUserFromSuperAdminJSONRequestBody = User

// ResetPasswordRequestBySuperAdminJSONRequestBody defines body for ResetPasswordRequestBySuperAdmin for application/json ContentType.
type ResetPasswordRequestBySuperAdminJSONRequestBody ResetPasswordRequestBySuperAdminJSONBody

// UpdateUserStatusFromSuperAdminJSONRequestBody defines body for UpdateUserStatusFromSuperAdmin for application/json ContentType.
type UpdateUserStatusFromSuperAdminJSONRequestBody UpdateUserStatusFromSuperAdminJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/v1/configs/tenant-configs)
	ListTenantConfigs(c *gin.Context, params ListTenantConfigsParams)

	// (POST /api/v1/configs/tenant-configs)
	AddTenantConfig(c *gin.Context)

	// (DELETE /api/v1/configs/tenant-configs/{id})
	DeleteTenantConfig(c *gin.Context, id openapi_types.UUID)

	// (GET /api/v1/configs/tenant-configs/{id})
	GetTenantConfigByID(c *gin.Context, id openapi_types.UUID)

	// (PUT /api/v1/configs/tenant-configs/{id})
	UpdateTenantConfig(c *gin.Context, id openapi_types.UUID)

	// (POST /api/v1/me)
	CreateMeUser(c *gin.Context)

	// (GET /api/v1/me/profile)
	GetMeProfile(c *gin.Context)

	// (PUT /api/v1/me/profile)
	UpdateMeProfile(c *gin.Context)

	// (POST /api/v1/me/profile/picture)
	UploadProfilePicture(c *gin.Context)

	// (GET /api/v1/roles)
	ListRoles(c *gin.Context, params ListRolesParams)

	// (POST /api/v1/roles)
	AddRole(c *gin.Context)

	// (DELETE /api/v1/roles/{id})
	DeleteRole(c *gin.Context, id openapi_types.UUID)

	// (GET /api/v1/roles/{id})
	GetRoleByID(c *gin.Context, id openapi_types.UUID)

	// (PUT /api/v1/roles/{id})
	UpdateRole(c *gin.Context, id openapi_types.UUID)

	// (GET /api/v1/tenant/profile)
	GetTenantProfile(c *gin.Context)

	// (PUT /api/v1/tenant/profile)
	UpdateTenantProfile(c *gin.Context)

	// (GET /api/v1/users)
	ListUsers(c *gin.Context, params ListUsersParams)

	// (POST /api/v1/users)
	AddUser(c *gin.Context)

	// (DELETE /api/v1/users/{userid})
	DeleteUser(c *gin.Context, userid string)

	// (GET /api/v1/users/{userid})
	GetUserByID(c *gin.Context, userid string)

	// (PUT /api/v1/users/{userid})
	UpdateUser(c *gin.Context, userid string)

	// (POST /api/v1/users/{userid}/password-reset-request)
	ResetPasswordRequestByAdmin(c *gin.Context, userid string)

	// (POST /api/v1/users/{userid}/roles/{roleid}/assign)
	AssignRole(c *gin.Context, userid string, roleid openapi_types.UUID)

	// (POST /api/v1/users/{userid}/roles/{roleid}/unassign)
	UnassignRole(c *gin.Context, userid string, roleid openapi_types.UUID)

	// (POST /api/v1/users/{userid}/status)
	UpdateUserStatus(c *gin.Context, userid string)
	// API Health Check
	// (GET /public-api/v1/health)
	GetHealthCheck(c *gin.Context)

	// (POST /public-api/v1/password-reset-request)
	ResetPasswordRequest(c *gin.Context)

	// (GET /public-api/v1/tenant)
	GetPublicTenant(c *gin.Context)

	// (GET /public-api/v1/users/{userid}/profile/picture)
	GetProfilePicture(c *gin.Context, userid string)

	// (GET /superadmin-api/v1/client-applications)
	ListClientApplications(c *gin.Context, params ListClientApplicationsParams)

	// (POST /superadmin-api/v1/client-applications)
	CreateClientApplication(c *gin.Context)

	// (DELETE /superadmin-api/v1/client-applications/{id})
	DeleteClientApplication(c *gin.Context, id openapi_types.UUID)

	// (GET /superadmin-api/v1/client-applications/{id})
	GetClientApplicationById(c *gin.Context, id openapi_types.UUID)

	// (PUT /superadmin-api/v1/client-applications/{id})
	UpdateClientApplication(c *gin.Context, id openapi_types.UUID)

	// (PATCH /superadmin-api/v1/client-applications/{id}/deactivate)
	DeactivateClientApplication(c *gin.Context, id openapi_types.UUID)

	// (GET /superadmin-api/v1/client-applications/{id}/tokens)
	ListAPITokens(c *gin.Context, id openapi_types.UUID, params ListAPITokensParams)

	// (POST /superadmin-api/v1/client-applications/{id}/tokens)
	CreateAPIToken(c *gin.Context, id openapi_types.UUID)

	// (DELETE /superadmin-api/v1/client-applications/{id}/tokens/{tokenId})
	DeleteAPIToken(c *gin.Context, id openapi_types.UUID, tokenId openapi_types.UUID)

	// (GET /superadmin-api/v1/client-applications/{id}/tokens/{tokenId})
	GetAPITokenById(c *gin.Context, id openapi_types.UUID, tokenId openapi_types.UUID)

	// (GET /superadmin-api/v1/client-applications/{id}/tokens/{tokenId}/audit)
	GetAPITokenAuditLogs(c *gin.Context, id openapi_types.UUID, tokenId openapi_types.UUID, params GetAPITokenAuditLogsParams)

	// (PATCH /superadmin-api/v1/client-applications/{id}/tokens/{tokenId}/revoke)
	RevokeAPIToken(c *gin.Context, id openapi_types.UUID, tokenId openapi_types.UUID)

	// (GET /superadmin-api/v1/configs/global-configs)
	ListGlobalConfigs(c *gin.Context, params ListGlobalConfigsParams)

	// (POST /superadmin-api/v1/configs/global-configs)
	AddGlobalConfig(c *gin.Context)

	// (DELETE /superadmin-api/v1/configs/global-configs/{id})
	DeleteGlobalConfig(c *gin.Context, id openapi_types.UUID)

	// (GET /superadmin-api/v1/configs/global-configs/{id})
	GetGlobalConfigByID(c *gin.Context, id openapi_types.UUID)

	// (PUT /superadmin-api/v1/configs/global-configs/{id})
	UpdateGlobalConfig(c *gin.Context, id openapi_types.UUID)

	// (GET /superadmin-api/v1/tenant/{tenantid}/features)
	GetTenantFeatures(c *gin.Context, tenantid openapi_types.UUID)

	// (PUT /superadmin-api/v1/tenant/{tenantid}/features)
	UpdateTenantFeatures(c *gin.Context, tenantid openapi_types.UUID)

	// (GET /superadmin-api/v1/tenants)
	ListTenants(c *gin.Context, params ListTenantsParams)

	// (POST /superadmin-api/v1/tenants)
	AddTenant(c *gin.Context)

	// (DELETE /superadmin-api/v1/tenants/{tenantid})
	DeleteTenant(c *gin.Context, tenantid openapi_types.UUID)

	// (GET /superadmin-api/v1/tenants/{tenantid})
	GetTenantByID(c *gin.Context, tenantid openapi_types.UUID)

	// (PUT /superadmin-api/v1/tenants/{tenantid})
	UpdateTenant(c *gin.Context, tenantid openapi_types.UUID)

	// (GET /superadmin-api/v1/tenants/{tenantid}/users)
	ListUsersFromSuperAdmin(c *gin.Context, tenantid openapi_types.UUID, params ListUsersFromSuperAdminParams)

	// (POST /superadmin-api/v1/tenants/{tenantid}/users)
	AddUserFromSuperAdmin(c *gin.Context, tenantid openapi_types.UUID)

	// (DELETE /superadmin-api/v1/tenants/{tenantid}/users/{userid})
	DeleteUserFromSuperAdmin(c *gin.Context, tenantid openapi_types.UUID, userid string)

	// (GET /superadmin-api/v1/tenants/{tenantid}/users/{userid})
	GetUserByIDFromSuperAdmin(c *gin.Context, tenantid openapi_types.UUID, userid string)

	// (PUT /superadmin-api/v1/tenants/{tenantid}/users/{userid})
	UpdateUserFromSuperAdmin(c *gin.Context, tenantid openapi_types.UUID, userid string)

	// (POST /superadmin-api/v1/tenants/{tenantid}/users/{userid}/password-reset-request)
	ResetPasswordRequestBySuperAdmin(c *gin.Context, tenantid openapi_types.UUID, userid string)

	// (POST /superadmin-api/v1/tenants/{tenantid}/users/{userid}/roles/{roleid}/assign)
	AssignRoleFromSuperAdmin(c *gin.Context, tenantid openapi_types.UUID, userid string, roleid openapi_types.UUID)

	// (POST /superadmin-api/v1/tenants/{tenantid}/users/{userid}/roles/{roleid}/unassign)
	UnassignRoleFromSuperAdmin(c *gin.Context, tenantid openapi_types.UUID, userid string, roleid openapi_types.UUID)

	// (POST /superadmin-api/v1/tenants/{tenantid}/users/{userid}/status)
	UpdateUserStatusFromSuperAdmin(c *gin.Context, tenantid openapi_types.UUID, userid string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ListTenantConfigs operation middleware
func (siw *ServerInterfaceWrapper) ListTenantConfigs(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTenantConfigsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageSize: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sortBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortBy", c.Request.URL.Query(), &params.SortBy)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sortBy: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", c.Request.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter order: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", c.Request.URL.Query(), &params.Q)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter q: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "detail" -------------

	err = runtime.BindQueryParameter("form", true, false, "detail", c.Request.URL.Query(), &params.Detail)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter detail: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListTenantConfigs(c, params)
}

// AddTenantConfig operation middleware
func (siw *ServerInterfaceWrapper) AddTenantConfig(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AddTenantConfig(c)
}

// DeleteTenantConfig operation middleware
func (siw *ServerInterfaceWrapper) DeleteTenantConfig(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteTenantConfig(c, id)
}

// GetTenantConfigByID operation middleware
func (siw *ServerInterfaceWrapper) GetTenantConfigByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTenantConfigByID(c, id)
}

// UpdateTenantConfig operation middleware
func (siw *ServerInterfaceWrapper) UpdateTenantConfig(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateTenantConfig(c, id)
}

// CreateMeUser operation middleware
func (siw *ServerInterfaceWrapper) CreateMeUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateMeUser(c)
}

// GetMeProfile operation middleware
func (siw *ServerInterfaceWrapper) GetMeProfile(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetMeProfile(c)
}

// UpdateMeProfile operation middleware
func (siw *ServerInterfaceWrapper) UpdateMeProfile(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateMeProfile(c)
}

// UploadProfilePicture operation middleware
func (siw *ServerInterfaceWrapper) UploadProfilePicture(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UploadProfilePicture(c)
}

// ListRoles operation middleware
func (siw *ServerInterfaceWrapper) ListRoles(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRolesParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageSize: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sortBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortBy", c.Request.URL.Query(), &params.SortBy)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sortBy: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", c.Request.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter order: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", c.Request.URL.Query(), &params.Q)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter q: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListRoles(c, params)
}

// AddRole operation middleware
func (siw *ServerInterfaceWrapper) AddRole(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AddRole(c)
}

// DeleteRole operation middleware
func (siw *ServerInterfaceWrapper) DeleteRole(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteRole(c, id)
}

// GetRoleByID operation middleware
func (siw *ServerInterfaceWrapper) GetRoleByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRoleByID(c, id)
}

// UpdateRole operation middleware
func (siw *ServerInterfaceWrapper) UpdateRole(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateRole(c, id)
}

// GetTenantProfile operation middleware
func (siw *ServerInterfaceWrapper) GetTenantProfile(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTenantProfile(c)
}

// UpdateTenantProfile operation middleware
func (siw *ServerInterfaceWrapper) UpdateTenantProfile(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateTenantProfile(c)
}

// ListUsers operation middleware
func (siw *ServerInterfaceWrapper) ListUsers(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListUsersParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageSize: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sortBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortBy", c.Request.URL.Query(), &params.SortBy)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sortBy: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", c.Request.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter order: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", c.Request.URL.Query(), &params.Q)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter q: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "detail" -------------

	err = runtime.BindQueryParameter("form", true, false, "detail", c.Request.URL.Query(), &params.Detail)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter detail: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListUsers(c, params)
}

// AddUser operation middleware
func (siw *ServerInterfaceWrapper) AddUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AddUser(c)
}

// DeleteUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "userid" -------------
	var userid string

	err = runtime.BindStyledParameterWithOptions("simple", "userid", c.Param("userid"), &userid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userid: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteUser(c, userid)
}

// GetUserByID operation middleware
func (siw *ServerInterfaceWrapper) GetUserByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "userid" -------------
	var userid string

	err = runtime.BindStyledParameterWithOptions("simple", "userid", c.Param("userid"), &userid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userid: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUserByID(c, userid)
}

// UpdateUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "userid" -------------
	var userid string

	err = runtime.BindStyledParameterWithOptions("simple", "userid", c.Param("userid"), &userid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userid: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateUser(c, userid)
}

// ResetPasswordRequestByAdmin operation middleware
func (siw *ServerInterfaceWrapper) ResetPasswordRequestByAdmin(c *gin.Context) {

	var err error

	// ------------- Path parameter "userid" -------------
	var userid string

	err = runtime.BindStyledParameterWithOptions("simple", "userid", c.Param("userid"), &userid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userid: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ResetPasswordRequestByAdmin(c, userid)
}

// AssignRole operation middleware
func (siw *ServerInterfaceWrapper) AssignRole(c *gin.Context) {

	var err error

	// ------------- Path parameter "userid" -------------
	var userid string

	err = runtime.BindStyledParameterWithOptions("simple", "userid", c.Param("userid"), &userid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userid: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "roleid" -------------
	var roleid openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "roleid", c.Param("roleid"), &roleid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter roleid: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AssignRole(c, userid, roleid)
}

// UnassignRole operation middleware
func (siw *ServerInterfaceWrapper) UnassignRole(c *gin.Context) {

	var err error

	// ------------- Path parameter "userid" -------------
	var userid string

	err = runtime.BindStyledParameterWithOptions("simple", "userid", c.Param("userid"), &userid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userid: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "roleid" -------------
	var roleid openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "roleid", c.Param("roleid"), &roleid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter roleid: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UnassignRole(c, userid, roleid)
}

// UpdateUserStatus operation middleware
func (siw *ServerInterfaceWrapper) UpdateUserStatus(c *gin.Context) {

	var err error

	// ------------- Path parameter "userid" -------------
	var userid string

	err = runtime.BindStyledParameterWithOptions("simple", "userid", c.Param("userid"), &userid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userid: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateUserStatus(c, userid)
}

// GetHealthCheck operation middleware
func (siw *ServerInterfaceWrapper) GetHealthCheck(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetHealthCheck(c)
}

// ResetPasswordRequest operation middleware
func (siw *ServerInterfaceWrapper) ResetPasswordRequest(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ResetPasswordRequest(c)
}

// GetPublicTenant operation middleware
func (siw *ServerInterfaceWrapper) GetPublicTenant(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPublicTenant(c)
}

// GetProfilePicture operation middleware
func (siw *ServerInterfaceWrapper) GetProfilePicture(c *gin.Context) {

	var err error

	// ------------- Path parameter "userid" -------------
	var userid string

	err = runtime.BindStyledParameterWithOptions("simple", "userid", c.Param("userid"), &userid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userid: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProfilePicture(c, userid)
}

// ListClientApplications operation middleware
func (siw *ServerInterfaceWrapper) ListClientApplications(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListClientApplicationsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageSize: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sortBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortBy", c.Request.URL.Query(), &params.SortBy)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sortBy: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", c.Request.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter order: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", c.Request.URL.Query(), &params.Q)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter q: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "includeInactive" -------------

	err = runtime.BindQueryParameter("form", true, false, "includeInactive", c.Request.URL.Query(), &params.IncludeInactive)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter includeInactive: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListClientApplications(c, params)
}

// CreateClientApplication operation middleware
func (siw *ServerInterfaceWrapper) CreateClientApplication(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateClientApplication(c)
}

// DeleteClientApplication operation middleware
func (siw *ServerInterfaceWrapper) DeleteClientApplication(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteClientApplication(c, id)
}

// GetClientApplicationById operation middleware
func (siw *ServerInterfaceWrapper) GetClientApplicationById(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetClientApplicationById(c, id)
}

// UpdateClientApplication operation middleware
func (siw *ServerInterfaceWrapper) UpdateClientApplication(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateClientApplication(c, id)
}

// DeactivateClientApplication operation middleware
func (siw *ServerInterfaceWrapper) DeactivateClientApplication(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeactivateClientApplication(c, id)
}

// ListAPITokens operation middleware
func (siw *ServerInterfaceWrapper) ListAPITokens(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAPITokensParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageSize: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sortBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortBy", c.Request.URL.Query(), &params.SortBy)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sortBy: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", c.Request.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter order: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "includeRevoked" -------------

	err = runtime.BindQueryParameter("form", true, false, "includeRevoked", c.Request.URL.Query(), &params.IncludeRevoked)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter includeRevoked: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "includeExpired" -------------

	err = runtime.BindQueryParameter("form", true, false, "includeExpired", c.Request.URL.Query(), &params.IncludeExpired)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter includeExpired: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListAPITokens(c, id, params)
}

// CreateAPIToken operation middleware
func (siw *ServerInterfaceWrapper) CreateAPIToken(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateAPIToken(c, id)
}

// DeleteAPIToken operation middleware
func (siw *ServerInterfaceWrapper) DeleteAPIToken(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "tokenId" -------------
	var tokenId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "tokenId", c.Param("tokenId"), &tokenId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tokenId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteAPIToken(c, id, tokenId)
}

// GetAPITokenById operation middleware
func (siw *ServerInterfaceWrapper) GetAPITokenById(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "tokenId" -------------
	var tokenId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "tokenId", c.Param("tokenId"), &tokenId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tokenId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAPITokenById(c, id, tokenId)
}

// GetAPITokenAuditLogs operation middleware
func (siw *ServerInterfaceWrapper) GetAPITokenAuditLogs(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "tokenId" -------------
	var tokenId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "tokenId", c.Param("tokenId"), &tokenId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tokenId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAPITokenAuditLogsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageSize: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAPITokenAuditLogs(c, id, tokenId, params)
}

// RevokeAPIToken operation middleware
func (siw *ServerInterfaceWrapper) RevokeAPIToken(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "tokenId" -------------
	var tokenId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "tokenId", c.Param("tokenId"), &tokenId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tokenId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RevokeAPIToken(c, id, tokenId)
}

// ListGlobalConfigs operation middleware
func (siw *ServerInterfaceWrapper) ListGlobalConfigs(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListGlobalConfigsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageSize: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sortBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortBy", c.Request.URL.Query(), &params.SortBy)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sortBy: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", c.Request.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter order: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", c.Request.URL.Query(), &params.Q)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter q: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "detail" -------------

	err = runtime.BindQueryParameter("form", true, false, "detail", c.Request.URL.Query(), &params.Detail)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter detail: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListGlobalConfigs(c, params)
}

// AddGlobalConfig operation middleware
func (siw *ServerInterfaceWrapper) AddGlobalConfig(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AddGlobalConfig(c)
}

// DeleteGlobalConfig operation middleware
func (siw *ServerInterfaceWrapper) DeleteGlobalConfig(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteGlobalConfig(c, id)
}

// GetGlobalConfigByID operation middleware
func (siw *ServerInterfaceWrapper) GetGlobalConfigByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGlobalConfigByID(c, id)
}

// UpdateGlobalConfig operation middleware
func (siw *ServerInterfaceWrapper) UpdateGlobalConfig(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateGlobalConfig(c, id)
}

// GetTenantFeatures operation middleware
func (siw *ServerInterfaceWrapper) GetTenantFeatures(c *gin.Context) {

	var err error

	// ------------- Path parameter "tenantid" -------------
	var tenantid openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "tenantid", c.Param("tenantid"), &tenantid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tenantid: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTenantFeatures(c, tenantid)
}

// UpdateTenantFeatures operation middleware
func (siw *ServerInterfaceWrapper) UpdateTenantFeatures(c *gin.Context) {

	var err error

	// ------------- Path parameter "tenantid" -------------
	var tenantid openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "tenantid", c.Param("tenantid"), &tenantid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tenantid: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateTenantFeatures(c, tenantid)
}

// ListTenants operation middleware
func (siw *ServerInterfaceWrapper) ListTenants(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTenantsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageSize: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sortBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortBy", c.Request.URL.Query(), &params.SortBy)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sortBy: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", c.Request.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter order: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", c.Request.URL.Query(), &params.Q)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter q: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListTenants(c, params)
}

// AddTenant operation middleware
func (siw *ServerInterfaceWrapper) AddTenant(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AddTenant(c)
}

// DeleteTenant operation middleware
func (siw *ServerInterfaceWrapper) DeleteTenant(c *gin.Context) {

	var err error

	// ------------- Path parameter "tenantid" -------------
	var tenantid openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "tenantid", c.Param("tenantid"), &tenantid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tenantid: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteTenant(c, tenantid)
}

// GetTenantByID operation middleware
func (siw *ServerInterfaceWrapper) GetTenantByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "tenantid" -------------
	var tenantid openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "tenantid", c.Param("tenantid"), &tenantid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tenantid: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTenantByID(c, tenantid)
}

// UpdateTenant operation middleware
func (siw *ServerInterfaceWrapper) UpdateTenant(c *gin.Context) {

	var err error

	// ------------- Path parameter "tenantid" -------------
	var tenantid openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "tenantid", c.Param("tenantid"), &tenantid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tenantid: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateTenant(c, tenantid)
}

// ListUsersFromSuperAdmin operation middleware
func (siw *ServerInterfaceWrapper) ListUsersFromSuperAdmin(c *gin.Context) {

	var err error

	// ------------- Path parameter "tenantid" -------------
	var tenantid openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "tenantid", c.Param("tenantid"), &tenantid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tenantid: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListUsersFromSuperAdminParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageSize: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sortBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortBy", c.Request.URL.Query(), &params.SortBy)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sortBy: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", c.Request.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter order: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", c.Request.URL.Query(), &params.Q)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter q: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListUsersFromSuperAdmin(c, tenantid, params)
}

// AddUserFromSuperAdmin operation middleware
func (siw *ServerInterfaceWrapper) AddUserFromSuperAdmin(c *gin.Context) {

	var err error

	// ------------- Path parameter "tenantid" -------------
	var tenantid openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "tenantid", c.Param("tenantid"), &tenantid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tenantid: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AddUserFromSuperAdmin(c, tenantid)
}

// DeleteUserFromSuperAdmin operation middleware
func (siw *ServerInterfaceWrapper) DeleteUserFromSuperAdmin(c *gin.Context) {

	var err error

	// ------------- Path parameter "tenantid" -------------
	var tenantid openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "tenantid", c.Param("tenantid"), &tenantid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tenantid: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "userid" -------------
	var userid string

	err = runtime.BindStyledParameterWithOptions("simple", "userid", c.Param("userid"), &userid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userid: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteUserFromSuperAdmin(c, tenantid, userid)
}

// GetUserByIDFromSuperAdmin operation middleware
func (siw *ServerInterfaceWrapper) GetUserByIDFromSuperAdmin(c *gin.Context) {

	var err error

	// ------------- Path parameter "tenantid" -------------
	var tenantid openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "tenantid", c.Param("tenantid"), &tenantid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tenantid: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "userid" -------------
	var userid string

	err = runtime.BindStyledParameterWithOptions("simple", "userid", c.Param("userid"), &userid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userid: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUserByIDFromSuperAdmin(c, tenantid, userid)
}

// UpdateUserFromSuperAdmin operation middleware
func (siw *ServerInterfaceWrapper) UpdateUserFromSuperAdmin(c *gin.Context) {

	var err error

	// ------------- Path parameter "tenantid" -------------
	var tenantid openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "tenantid", c.Param("tenantid"), &tenantid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tenantid: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "userid" -------------
	var userid string

	err = runtime.BindStyledParameterWithOptions("simple", "userid", c.Param("userid"), &userid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userid: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateUserFromSuperAdmin(c, tenantid, userid)
}

// ResetPasswordRequestBySuperAdmin operation middleware
func (siw *ServerInterfaceWrapper) ResetPasswordRequestBySuperAdmin(c *gin.Context) {

	var err error

	// ------------- Path parameter "tenantid" -------------
	var tenantid openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "tenantid", c.Param("tenantid"), &tenantid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tenantid: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "userid" -------------
	var userid string

	err = runtime.BindStyledParameterWithOptions("simple", "userid", c.Param("userid"), &userid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userid: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ResetPasswordRequestBySuperAdmin(c, tenantid, userid)
}

// AssignRoleFromSuperAdmin operation middleware
func (siw *ServerInterfaceWrapper) AssignRoleFromSuperAdmin(c *gin.Context) {

	var err error

	// ------------- Path parameter "tenantid" -------------
	var tenantid openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "tenantid", c.Param("tenantid"), &tenantid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tenantid: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "userid" -------------
	var userid string

	err = runtime.BindStyledParameterWithOptions("simple", "userid", c.Param("userid"), &userid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userid: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "roleid" -------------
	var roleid openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "roleid", c.Param("roleid"), &roleid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter roleid: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AssignRoleFromSuperAdmin(c, tenantid, userid, roleid)
}

// UnassignRoleFromSuperAdmin operation middleware
func (siw *ServerInterfaceWrapper) UnassignRoleFromSuperAdmin(c *gin.Context) {

	var err error

	// ------------- Path parameter "tenantid" -------------
	var tenantid openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "tenantid", c.Param("tenantid"), &tenantid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tenantid: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "userid" -------------
	var userid string

	err = runtime.BindStyledParameterWithOptions("simple", "userid", c.Param("userid"), &userid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userid: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "roleid" -------------
	var roleid openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "roleid", c.Param("roleid"), &roleid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter roleid: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UnassignRoleFromSuperAdmin(c, tenantid, userid, roleid)
}

// UpdateUserStatusFromSuperAdmin operation middleware
func (siw *ServerInterfaceWrapper) UpdateUserStatusFromSuperAdmin(c *gin.Context) {

	var err error

	// ------------- Path parameter "tenantid" -------------
	var tenantid openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "tenantid", c.Param("tenantid"), &tenantid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tenantid: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "userid" -------------
	var userid string

	err = runtime.BindStyledParameterWithOptions("simple", "userid", c.Param("userid"), &userid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userid: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateUserStatusFromSuperAdmin(c, tenantid, userid)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/v1/configs/tenant-configs", wrapper.ListTenantConfigs)
	router.POST(options.BaseURL+"/api/v1/configs/tenant-configs", wrapper.AddTenantConfig)
	router.DELETE(options.BaseURL+"/api/v1/configs/tenant-configs/:id", wrapper.DeleteTenantConfig)
	router.GET(options.BaseURL+"/api/v1/configs/tenant-configs/:id", wrapper.GetTenantConfigByID)
	router.PUT(options.BaseURL+"/api/v1/configs/tenant-configs/:id", wrapper.UpdateTenantConfig)
	router.POST(options.BaseURL+"/api/v1/me", wrapper.CreateMeUser)
	router.GET(options.BaseURL+"/api/v1/me/profile", wrapper.GetMeProfile)
	router.PUT(options.BaseURL+"/api/v1/me/profile", wrapper.UpdateMeProfile)
	router.POST(options.BaseURL+"/api/v1/me/profile/picture", wrapper.UploadProfilePicture)
	router.GET(options.BaseURL+"/api/v1/roles", wrapper.ListRoles)
	router.POST(options.BaseURL+"/api/v1/roles", wrapper.AddRole)
	router.DELETE(options.BaseURL+"/api/v1/roles/:id", wrapper.DeleteRole)
	router.GET(options.BaseURL+"/api/v1/roles/:id", wrapper.GetRoleByID)
	router.PUT(options.BaseURL+"/api/v1/roles/:id", wrapper.UpdateRole)
	router.GET(options.BaseURL+"/api/v1/tenant/profile", wrapper.GetTenantProfile)
	router.PUT(options.BaseURL+"/api/v1/tenant/profile", wrapper.UpdateTenantProfile)
	router.GET(options.BaseURL+"/api/v1/users", wrapper.ListUsers)
	router.POST(options.BaseURL+"/api/v1/users", wrapper.AddUser)
	router.DELETE(options.BaseURL+"/api/v1/users/:userid", wrapper.DeleteUser)
	router.GET(options.BaseURL+"/api/v1/users/:userid", wrapper.GetUserByID)
	router.PUT(options.BaseURL+"/api/v1/users/:userid", wrapper.UpdateUser)
	router.POST(options.BaseURL+"/api/v1/users/:userid/password-reset-request", wrapper.ResetPasswordRequestByAdmin)
	router.POST(options.BaseURL+"/api/v1/users/:userid/roles/:roleid/assign", wrapper.AssignRole)
	router.POST(options.BaseURL+"/api/v1/users/:userid/roles/:roleid/unassign", wrapper.UnassignRole)
	router.POST(options.BaseURL+"/api/v1/users/:userid/status", wrapper.UpdateUserStatus)
	router.GET(options.BaseURL+"/public-api/v1/health", wrapper.GetHealthCheck)
	router.POST(options.BaseURL+"/public-api/v1/password-reset-request", wrapper.ResetPasswordRequest)
	router.GET(options.BaseURL+"/public-api/v1/tenant", wrapper.GetPublicTenant)
	router.GET(options.BaseURL+"/public-api/v1/users/:userid/profile/picture", wrapper.GetProfilePicture)
	router.GET(options.BaseURL+"/superadmin-api/v1/client-applications", wrapper.ListClientApplications)
	router.POST(options.BaseURL+"/superadmin-api/v1/client-applications", wrapper.CreateClientApplication)
	router.DELETE(options.BaseURL+"/superadmin-api/v1/client-applications/:id", wrapper.DeleteClientApplication)
	router.GET(options.BaseURL+"/superadmin-api/v1/client-applications/:id", wrapper.GetClientApplicationById)
	router.PUT(options.BaseURL+"/superadmin-api/v1/client-applications/:id", wrapper.UpdateClientApplication)
	router.PATCH(options.BaseURL+"/superadmin-api/v1/client-applications/:id/deactivate", wrapper.DeactivateClientApplication)
	router.GET(options.BaseURL+"/superadmin-api/v1/client-applications/:id/tokens", wrapper.ListAPITokens)
	router.POST(options.BaseURL+"/superadmin-api/v1/client-applications/:id/tokens", wrapper.CreateAPIToken)
	router.DELETE(options.BaseURL+"/superadmin-api/v1/client-applications/:id/tokens/:tokenId", wrapper.DeleteAPIToken)
	router.GET(options.BaseURL+"/superadmin-api/v1/client-applications/:id/tokens/:tokenId", wrapper.GetAPITokenById)
	router.GET(options.BaseURL+"/superadmin-api/v1/client-applications/:id/tokens/:tokenId/audit", wrapper.GetAPITokenAuditLogs)
	router.PATCH(options.BaseURL+"/superadmin-api/v1/client-applications/:id/tokens/:tokenId/revoke", wrapper.RevokeAPIToken)
	router.GET(options.BaseURL+"/superadmin-api/v1/configs/global-configs", wrapper.ListGlobalConfigs)
	router.POST(options.BaseURL+"/superadmin-api/v1/configs/global-configs", wrapper.AddGlobalConfig)
	router.DELETE(options.BaseURL+"/superadmin-api/v1/configs/global-configs/:id", wrapper.DeleteGlobalConfig)
	router.GET(options.BaseURL+"/superadmin-api/v1/configs/global-configs/:id", wrapper.GetGlobalConfigByID)
	router.PUT(options.BaseURL+"/superadmin-api/v1/configs/global-configs/:id", wrapper.UpdateGlobalConfig)
	router.GET(options.BaseURL+"/superadmin-api/v1/tenant/:tenantid/features", wrapper.GetTenantFeatures)
	router.PUT(options.BaseURL+"/superadmin-api/v1/tenant/:tenantid/features", wrapper.UpdateTenantFeatures)
	router.GET(options.BaseURL+"/superadmin-api/v1/tenants", wrapper.ListTenants)
	router.POST(options.BaseURL+"/superadmin-api/v1/tenants", wrapper.AddTenant)
	router.DELETE(options.BaseURL+"/superadmin-api/v1/tenants/:tenantid", wrapper.DeleteTenant)
	router.GET(options.BaseURL+"/superadmin-api/v1/tenants/:tenantid", wrapper.GetTenantByID)
	router.PUT(options.BaseURL+"/superadmin-api/v1/tenants/:tenantid", wrapper.UpdateTenant)
	router.GET(options.BaseURL+"/superadmin-api/v1/tenants/:tenantid/users", wrapper.ListUsersFromSuperAdmin)
	router.POST(options.BaseURL+"/superadmin-api/v1/tenants/:tenantid/users", wrapper.AddUserFromSuperAdmin)
	router.DELETE(options.BaseURL+"/superadmin-api/v1/tenants/:tenantid/users/:userid", wrapper.DeleteUserFromSuperAdmin)
	router.GET(options.BaseURL+"/superadmin-api/v1/tenants/:tenantid/users/:userid", wrapper.GetUserByIDFromSuperAdmin)
	router.PUT(options.BaseURL+"/superadmin-api/v1/tenants/:tenantid/users/:userid", wrapper.UpdateUserFromSuperAdmin)
	router.POST(options.BaseURL+"/superadmin-api/v1/tenants/:tenantid/users/:userid/password-reset-request", wrapper.ResetPasswordRequestBySuperAdmin)
	router.POST(options.BaseURL+"/superadmin-api/v1/tenants/:tenantid/users/:userid/roles/:roleid/assign", wrapper.AssignRoleFromSuperAdmin)
	router.POST(options.BaseURL+"/superadmin-api/v1/tenants/:tenantid/users/:userid/roles/:roleid/unassign", wrapper.UnassignRoleFromSuperAdmin)
	router.POST(options.BaseURL+"/superadmin-api/v1/tenants/:tenantid/users/:userid/status", wrapper.UpdateUserStatusFromSuperAdmin)
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: role.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const createRole = `-- name: CreateRole :one
INSERT INTO core_roles (
  "name", user_id
) VALUES (
  $1, $2
)
RETURNING id, user_id, created_at, updated_at, name
`

type CreateRoleParams struct {
	Name   string `json:"name"`
	UserID string `json:"user_id"`
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) (CoreRole, error) {
	row := q.db.QueryRow(ctx, createRole, arg.Name, arg.UserID)
	var i CoreRole
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
	)
	return i, err
}

const deleteRole = `-- name: DeleteRole :one
DELETE FROM core_roles
WHERE id = $1 AND user_id = $2
RETURNING id
`

type DeleteRoleParams struct {
	ID     uuid.UUID `json:"id"`
	UserID string    `json:"user_id"`
}

func (q *Queries) DeleteRole(ctx context.Context, arg DeleteRoleParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, deleteRole, arg.ID, arg.UserID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getRoleByID = `-- name: GetRoleByID :one
SELECT id, user_id, created_at, updated_at, name FROM core_roles
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRoleByID(ctx context.Context, id uuid.UUID) (CoreRole, error) {
	row := q.db.QueryRow(ctx, getRoleByID, id)
	var i CoreRole
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
	)
	return i, err
}

const getRoleByName = `-- name: GetRoleByName :one
SELECT id, user_id, created_at, updated_at, name FROM core_roles
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetRoleByName(ctx context.Context, name string) (CoreRole, error) {
	row := q.db.QueryRow(ctx, getRoleByName, name)
	var i CoreRole
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
	)
	return i, err
}

const listRoles = `-- name: ListRoles :many
SELECT id, user_id, created_at, updated_at, name FROM core_roles
WHERE (UPPER(name) LIKE UPPER($3) OR $3 IS NULL)
ORDER BY created_at
LIMIT $1
OFFSET $2
`

type ListRolesParams struct {
	Limit  int32       `json:"limit"`
	Offset int32       `json:"offset"`
	Like   interface{} `json:"like"`
}

func (q *Queries) ListRoles(ctx context.Context, arg ListRolesParams) ([]CoreRole, error) {
	rows, err := q.db.Query(ctx, listRoles, arg.Limit, arg.Offset, arg.Like)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CoreRole{}
	for rows.Next() {
		var i CoreRole
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRole = `-- name: UpdateRole :one
UPDATE core_roles 
SET "name" = $2
WHERE id = $1
RETURNING id
`

type UpdateRoleParams struct {
	ID   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, updateRole, arg.ID, arg.Name)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package repository

import (
	"time"

	subentity "ctoup.com/coreapp/pkg/shared/repository/subentity"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type CoreApiToken struct {
	ID                  uuid.UUID          `json:"id"`
	ClientApplicationID uuid.UUID          `json:"client_application_id"`
	Name                string             `json:"name"`
	Description         pgtype.Text        `json:"description"`
	TokenHash           []byte             `json:"token_hash"`
	TokenPrefix         string             `json:"token_prefix"`
	ExpiresAt           time.Time          `json:"expires_at"`
	Revoked             bool               `json:"revoked"`
	RevokedAt           pgtype.Timestamptz `json:"revoked_at"`
	RevokedReason       pgtype.Text        `json:"revoked_reason"`
	RevokedBy           pgtype.Text        `json:"revoked_by"`
	CreatedBy           string             `json:"created_by"`
	Scopes              []string           `json:"scopes"`
	CreatedAt           time.Time          `json:"created_at"`
	UpdatedAt           time.Time          `json:"updated_at"`
	LastUsedAt          pgtype.Timestamptz `json:"last_used_at"`
	LastUsedIp          pgtype.Text        `json:"last_used_ip"`
}

type CoreApiTokenAuditLog struct {
	ID             uuid.UUID   `json:"id"`
	TokenID        uuid.UUID   `json:"token_id"`
	Action         string      `json:"action"`
	IpAddress      pgtype.Text `json:"ip_address"`
	UserAgent      pgtype.Text `json:"user_agent"`
	Timestamp      time.Time   `json:"timestamp"`
	AdditionalData []byte      `json:"additional_data"`
}

type CoreClientApplication struct {
	ID          uuid.UUID          `json:"id"`
	Name        string             `json:"name"`
	Description pgtype.Text        `json:"description"`
	TenantID    pgtype.Text        `json:"tenant_id"`
	Active      bool               `json:"active"`
	CreatedBy   string             `json:"created_by"`
	CreatedAt   time.Time          `json:"created_at"`
	UpdatedAt   time.Time          `json:"updated_at"`
	LastUsedAt  pgtype.Timestamptz `json:"last_used_at"`
}

type CoreEmailVerificationToken struct {
	ID        uuid.UUID          `json:"id"`
	UserID    string             `json:"user_id"`
	TenantID  string             `json:"tenant_id"`
	Token     string             `json:"token"`
	TokenHash []byte             `json:"token_hash"`
	ExpiresAt time.Time          `json:"expires_at"`
	UsedAt    pgtype.Timestamptz `json:"used_at"`
	CreatedAt time.Time          `json:"created_at"`
	UpdatedAt time.Time          `json:"updated_at"`
}

type CoreGlobalConfig struct {
	ID        uuid.UUID   `json:"id"`
	Name      string      `json:"name"`
	Value     pgtype.Text `json:"value"`
	UserID    string      `json:"user_id"`
	CreatedAt time.Time   `json:"created_at"`
	UpdatedAt time.Time   `json:"updated_at"`
}

type CoreMigration struct {
	Version int64 `json:"version"`
	Dirty   bool  `json:"dirty"`
}

type CorePrompt struct {
	ID                 uuid.UUID   `json:"id"`
	Name               string      `json:"name"`
	Content            string      `json:"content"`
	Tags               []string    `json:"tags"`
	Parameters         []string    `json:"parameters"`
	SampleParameters   []byte      `json:"sample_parameters"`
	Format             string      `json:"format"`
	FormatInstructions pgtype.Text `json:"format_instructions"`
	UserID             string      `json:"user_id"`
	TenantID           string      `json:"tenant_id"`
	CreatedAt          time.Time   `json:"created_at"`
	UpdatedAt          time.Time   `json:"updated_at"`
}

type CoreRole struct {
	ID        uuid.UUID `json:"id"`
	UserID    string    `json:"user_id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	Name      string    `json:"name"`
}

type CoreTenant struct {
	ID                    uuid.UUID                `json:"id"`
	TenantID              string                   `json:"tenant_id"`
	Name                  string                   `json:"name"`
	Subdomain             string                   `json:"subdomain"`
	EnableEmailLinkSignIn bool                     `json:"enable_email_link_sign_in"`
	AllowPasswordSignUp   bool                     `json:"allow_password_sign_up"`
	UserID                string                   `json:"user_id"`
	CreatedAt             time.Time                `json:"created_at"`
	UpdatedAt             time.Time                `json:"updated_at"`
	Profile               subentity.TenantProfile  `json:"profile"`
	Features              subentity.TenantFeatures `json:"features"`
	AllowSignup           bool                     `json:"allow_signup"`
}

type CoreTenantConfig struct {
	ID        uuid.UUID   `json:"id"`
	Name      string      `json:"name"`
	Value     pgtype.Text `json:"value"`
	UserID    string      `json:"user_id"`
	TenantID  string      `json:"tenant_id"`
	CreatedAt time.Time   `json:"created_at"`
	UpdatedAt time.Time   `json:"updated_at"`
}

type CoreTranslation struct {
	ID         uuid.UUID `json:"id"`
	EntityType string    `json:"entity_type"`
	EntityID   uuid.UUID `json:"entity_id"`
	Language   string    `json:"language"`
	Field      string    `json:"field"`
	Value      string    `json:"value"`
	TenantID   string    `json:"tenant_id"`
	CreatedAt  time.Time `json:"created_at"`
	UpdatedAt  time.Time `json:"updated_at"`
}

type CoreUser struct {
	ID        string                `json:"id"`
	Profile   subentity.UserProfile `json:"profile"`
	Email     pgtype.Text           `json:"email"`
	CreatedAt time.Time             `json:"created_at"`
	TenantID  pgtype.Text           `json:"tenant_id"`
	Roles     []string              `json:"roles"`
}

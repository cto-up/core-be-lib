// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: translations.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const createTranslation = `-- name: CreateTranslation :one
INSERT INTO core_translations (
    entity_type,
    entity_id,
    language,
    field,
    value,
    tenant_id
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, entity_type, entity_id, language, field, value, tenant_id, created_at, updated_at
`

type CreateTranslationParams struct {
	EntityType string    `json:"entity_type"`
	EntityID   uuid.UUID `json:"entity_id"`
	Language   string    `json:"language"`
	Field      string    `json:"field"`
	Value      string    `json:"value"`
	TenantID   string    `json:"tenant_id"`
}

// Translations
func (q *Queries) CreateTranslation(ctx context.Context, arg CreateTranslationParams) (CoreTranslation, error) {
	row := q.db.QueryRow(ctx, createTranslation,
		arg.EntityType,
		arg.EntityID,
		arg.Language,
		arg.Field,
		arg.Value,
		arg.TenantID,
	)
	var i CoreTranslation
	err := row.Scan(
		&i.ID,
		&i.EntityType,
		&i.EntityID,
		&i.Language,
		&i.Field,
		&i.Value,
		&i.TenantID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTranslationById = `-- name: DeleteTranslationById :exec
DELETE FROM core_translations
WHERE id = $1 AND tenant_id = $2
`

type DeleteTranslationByIdParams struct {
	ID       uuid.UUID `json:"id"`
	TenantID string    `json:"tenant_id"`
}

func (q *Queries) DeleteTranslationById(ctx context.Context, arg DeleteTranslationByIdParams) error {
	_, err := q.db.Exec(ctx, deleteTranslationById, arg.ID, arg.TenantID)
	return err
}

const deleteTranslationsByEntityId = `-- name: DeleteTranslationsByEntityId :exec
DELETE FROM core_translations
WHERE entity_id = $1 AND tenant_id = $2
`

type DeleteTranslationsByEntityIdParams struct {
	EntityID uuid.UUID `json:"entity_id"`
	TenantID string    `json:"tenant_id"`
}

func (q *Queries) DeleteTranslationsByEntityId(ctx context.Context, arg DeleteTranslationsByEntityIdParams) error {
	_, err := q.db.Exec(ctx, deleteTranslationsByEntityId, arg.EntityID, arg.TenantID)
	return err
}

const getTranslation = `-- name: GetTranslation :one
SELECT id, entity_type, entity_id, language, field, value, tenant_id, created_at, updated_at FROM core_translations
WHERE entity_type = $1 AND entity_id = $2 AND field = $3 AND language = $4 AND tenant_id = $5
`

type GetTranslationParams struct {
	EntityType string    `json:"entity_type"`
	EntityID   uuid.UUID `json:"entity_id"`
	Field      string    `json:"field"`
	Language   string    `json:"language"`
	TenantID   string    `json:"tenant_id"`
}

func (q *Queries) GetTranslation(ctx context.Context, arg GetTranslationParams) (CoreTranslation, error) {
	row := q.db.QueryRow(ctx, getTranslation,
		arg.EntityType,
		arg.EntityID,
		arg.Field,
		arg.Language,
		arg.TenantID,
	)
	var i CoreTranslation
	err := row.Scan(
		&i.ID,
		&i.EntityType,
		&i.EntityID,
		&i.Language,
		&i.Field,
		&i.Value,
		&i.TenantID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTranslationById = `-- name: GetTranslationById :one
SELECT id, entity_type, entity_id, language, field, value, tenant_id, created_at, updated_at FROM core_translations
WHERE id = $1 AND tenant_id = $2
`

type GetTranslationByIdParams struct {
	ID       uuid.UUID `json:"id"`
	TenantID string    `json:"tenant_id"`
}

func (q *Queries) GetTranslationById(ctx context.Context, arg GetTranslationByIdParams) (CoreTranslation, error) {
	row := q.db.QueryRow(ctx, getTranslationById, arg.ID, arg.TenantID)
	var i CoreTranslation
	err := row.Scan(
		&i.ID,
		&i.EntityType,
		&i.EntityID,
		&i.Language,
		&i.Field,
		&i.Value,
		&i.TenantID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTranslationsByEntityId = `-- name: GetTranslationsByEntityId :many
SELECT id, entity_type, entity_id, language, field, value, tenant_id, created_at, updated_at FROM core_translations
WHERE entity_id = $1 AND tenant_id = $2
`

type GetTranslationsByEntityIdParams struct {
	EntityID uuid.UUID `json:"entity_id"`
	TenantID string    `json:"tenant_id"`
}

func (q *Queries) GetTranslationsByEntityId(ctx context.Context, arg GetTranslationsByEntityIdParams) ([]CoreTranslation, error) {
	rows, err := q.db.Query(ctx, getTranslationsByEntityId, arg.EntityID, arg.TenantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CoreTranslation{}
	for rows.Next() {
		var i CoreTranslation
		if err := rows.Scan(
			&i.ID,
			&i.EntityType,
			&i.EntityID,
			&i.Language,
			&i.Field,
			&i.Value,
			&i.TenantID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTranslationsByEntityTypeAndId = `-- name: GetTranslationsByEntityTypeAndId :many
SELECT id, entity_type, entity_id, language, field, value, tenant_id, created_at, updated_at FROM core_translations
WHERE entity_type = $1 AND entity_id = $2 AND tenant_id = $3
`

type GetTranslationsByEntityTypeAndIdParams struct {
	EntityType string    `json:"entity_type"`
	EntityID   uuid.UUID `json:"entity_id"`
	TenantID   string    `json:"tenant_id"`
}

func (q *Queries) GetTranslationsByEntityTypeAndId(ctx context.Context, arg GetTranslationsByEntityTypeAndIdParams) ([]CoreTranslation, error) {
	rows, err := q.db.Query(ctx, getTranslationsByEntityTypeAndId, arg.EntityType, arg.EntityID, arg.TenantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CoreTranslation{}
	for rows.Next() {
		var i CoreTranslation
		if err := rows.Scan(
			&i.ID,
			&i.EntityType,
			&i.EntityID,
			&i.Language,
			&i.Field,
			&i.Value,
			&i.TenantID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTranslations = `-- name: ListTranslations :many
SELECT id, entity_type, entity_id, language, field, value, tenant_id, created_at, updated_at FROM core_translations
WHERE tenant_id = $3::text
  AND (UPPER(name) LIKE UPPER($4) OR $4 IS NULL)
ORDER BY
  CASE
            WHEN $5::text = 'asc' and $6::text = 'name' THEN "name"
        END ASC,
  CASE
            WHEN (NOT $5::text = 'asc') and $6::text = 'name' THEN "name"
        END DESC
LIMIT $1
OFFSET $2
`

type ListTranslationsParams struct {
	Limit    int32       `json:"limit"`
	Offset   int32       `json:"offset"`
	TenantID string      `json:"tenant_id"`
	Like     interface{} `json:"like"`
	Order    string      `json:"order"`
	SortBy   string      `json:"sortBy"`
}

func (q *Queries) ListTranslations(ctx context.Context, arg ListTranslationsParams) ([]CoreTranslation, error) {
	rows, err := q.db.Query(ctx, listTranslations,
		arg.Limit,
		arg.Offset,
		arg.TenantID,
		arg.Like,
		arg.Order,
		arg.SortBy,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CoreTranslation{}
	for rows.Next() {
		var i CoreTranslation
		if err := rows.Scan(
			&i.ID,
			&i.EntityType,
			&i.EntityID,
			&i.Language,
			&i.Field,
			&i.Value,
			&i.TenantID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTranslationById = `-- name: UpdateTranslationById :one
UPDATE core_translations
SET value = $2,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND tenant_id = $3
RETURNING id, entity_type, entity_id, language, field, value, tenant_id, created_at, updated_at
`

type UpdateTranslationByIdParams struct {
	ID       uuid.UUID `json:"id"`
	Value    string    `json:"value"`
	TenantID string    `json:"tenant_id"`
}

func (q *Queries) UpdateTranslationById(ctx context.Context, arg UpdateTranslationByIdParams) (CoreTranslation, error) {
	row := q.db.QueryRow(ctx, updateTranslationById, arg.ID, arg.Value, arg.TenantID)
	var i CoreTranslation
	err := row.Scan(
		&i.ID,
		&i.EntityType,
		&i.EntityID,
		&i.Language,
		&i.Field,
		&i.Value,
		&i.TenantID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

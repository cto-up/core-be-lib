// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: tenant_config.sql

package repository

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createTenantConfig = `-- name: CreateTenantConfig :one
INSERT INTO core_tenant_configs (
  user_id, tenant_id, "name", "value"
) VALUES (
  $1,$4::text, $2, $3
)
RETURNING id, name, value, user_id, tenant_id, created_at, updated_at
`

type CreateTenantConfigParams struct {
	UserID   string      `json:"user_id"`
	Name     string      `json:"name"`
	Value    pgtype.Text `json:"value"`
	TenantID string      `json:"tenant_id"`
}

func (q *Queries) CreateTenantConfig(ctx context.Context, arg CreateTenantConfigParams) (CoreTenantConfig, error) {
	row := q.db.QueryRow(ctx, createTenantConfig,
		arg.UserID,
		arg.Name,
		arg.Value,
		arg.TenantID,
	)
	var i CoreTenantConfig
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Value,
		&i.UserID,
		&i.TenantID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTenantConfig = `-- name: DeleteTenantConfig :one
DELETE FROM core_tenant_configs
WHERE id = $1 and tenant_id = $2::text
RETURNING id
`

type DeleteTenantConfigParams struct {
	ID       uuid.UUID `json:"id"`
	TenantID string    `json:"tenant_id"`
}

func (q *Queries) DeleteTenantConfig(ctx context.Context, arg DeleteTenantConfigParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, deleteTenantConfig, arg.ID, arg.TenantID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getTenantConfigByID = `-- name: GetTenantConfigByID :one
SELECT id, name, value, user_id, tenant_id, created_at, updated_at FROM core_tenant_configs
WHERE id = $1 AND tenant_id = $2::text LIMIT 1
`

type GetTenantConfigByIDParams struct {
	ID       uuid.UUID `json:"id"`
	TenantID string    `json:"tenant_id"`
}

func (q *Queries) GetTenantConfigByID(ctx context.Context, arg GetTenantConfigByIDParams) (CoreTenantConfig, error) {
	row := q.db.QueryRow(ctx, getTenantConfigByID, arg.ID, arg.TenantID)
	var i CoreTenantConfig
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Value,
		&i.UserID,
		&i.TenantID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTenantConfigByName = `-- name: GetTenantConfigByName :one
SELECT id, name, value, user_id, tenant_id, created_at, updated_at FROM core_tenant_configs
WHERE name = $1 AND tenant_id = $2::text LIMIT 1
`

type GetTenantConfigByNameParams struct {
	Name     string `json:"name"`
	TenantID string `json:"tenant_id"`
}

func (q *Queries) GetTenantConfigByName(ctx context.Context, arg GetTenantConfigByNameParams) (CoreTenantConfig, error) {
	row := q.db.QueryRow(ctx, getTenantConfigByName, arg.Name, arg.TenantID)
	var i CoreTenantConfig
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Value,
		&i.UserID,
		&i.TenantID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTenantConfigs = `-- name: ListTenantConfigs :many
SELECT id, name, value, user_id, tenant_id, created_at, updated_at FROM core_tenant_configs
WHERE tenant_id = $3::text
  AND (UPPER(name) LIKE UPPER($4) OR $4 IS NULL)
ORDER BY
  CASE
            WHEN $5::text = 'asc' and $6::text = 'name' THEN "name"
            WHEN $5::text = 'asc' and $6::text = 'value' THEN "value"
        END ASC,
  CASE
            WHEN (NOT $5::text = 'asc') and $6::text = 'name' THEN "name"
            WHEN (NOT $5::text = 'asc') and $6::text = 'value' THEN "value"
        END DESC
LIMIT $1
OFFSET $2
`

type ListTenantConfigsParams struct {
	Limit    int32       `json:"limit"`
	Offset   int32       `json:"offset"`
	TenantID string      `json:"tenant_id"`
	Like     interface{} `json:"like"`
	Order    string      `json:"order"`
	SortBy   string      `json:"sortBy"`
}

func (q *Queries) ListTenantConfigs(ctx context.Context, arg ListTenantConfigsParams) ([]CoreTenantConfig, error) {
	rows, err := q.db.Query(ctx, listTenantConfigs,
		arg.Limit,
		arg.Offset,
		arg.TenantID,
		arg.Like,
		arg.Order,
		arg.SortBy,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CoreTenantConfig{}
	for rows.Next() {
		var i CoreTenantConfig
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Value,
			&i.UserID,
			&i.TenantID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTenantConfig = `-- name: UpdateTenantConfig :one
UPDATE core_tenant_configs 
SET 
    "name" = $2,
    "value" = $3
WHERE id = $1 and tenant_id = $4::text
RETURNING id
`

type UpdateTenantConfigParams struct {
	ID       uuid.UUID   `json:"id"`
	Name     string      `json:"name"`
	Value    pgtype.Text `json:"value"`
	TenantID string      `json:"tenant_id"`
}

func (q *Queries) UpdateTenantConfig(ctx context.Context, arg UpdateTenantConfigParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, updateTenantConfig,
		arg.ID,
		arg.Name,
		arg.Value,
		arg.TenantID,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

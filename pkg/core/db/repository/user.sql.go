// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package repository

import (
	"context"

	subentity "ctoup.com/coreapp/pkg/shared/repository/subentity"
)

const createUser = `-- name: CreateUser :one
INSERT INTO core_users (
  "id", "email", "profile", roles, "tenant_id"
) VALUES (
  $1, $3::text, $2, $4::VARCHAR[], $5::text
)
RETURNING id, profile, email, core_roles, created_at, tenant_id, roles
`

type CreateUserParams struct {
	ID       string                `json:"id"`
	Profile  subentity.UserProfile `json:"profile"`
	Email    string                `json:"email"`
	Roles    []string              `json:"roles"`
	TenantID string                `json:"tenant_id"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CoreUser, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.Profile,
		arg.Email,
		arg.Roles,
		arg.TenantID,
	)
	var i CoreUser
	err := row.Scan(
		&i.ID,
		&i.Profile,
		&i.Email,
		&i.CoreRoles,
		&i.CreatedAt,
		&i.TenantID,
		&i.Roles,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :one
DELETE FROM core_users
WHERE id = $1
AND tenant_id = $2::text
RETURNING id
`

type DeleteUserParams struct {
	ID       string `json:"id"`
	TenantID string `json:"tenant_id"`
}

func (q *Queries) DeleteUser(ctx context.Context, arg DeleteUserParams) (string, error) {
	row := q.db.QueryRow(ctx, deleteUser, arg.ID, arg.TenantID)
	var id string
	err := row.Scan(&id)
	return id, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, profile, email, core_roles, created_at, tenant_id, roles FROM core_users
WHERE email = $1::text
AND tenant_id = $2::text
LIMIT 1
`

type GetUserByEmailParams struct {
	Email    string `json:"email"`
	TenantID string `json:"tenant_id"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, arg GetUserByEmailParams) (CoreUser, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, arg.Email, arg.TenantID)
	var i CoreUser
	err := row.Scan(
		&i.ID,
		&i.Profile,
		&i.Email,
		&i.CoreRoles,
		&i.CreatedAt,
		&i.TenantID,
		&i.Roles,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, profile, email, core_roles, created_at, tenant_id, roles FROM core_users
WHERE id = $1
AND tenant_id = $2::text
LIMIT 1
`

type GetUserByIDParams struct {
	ID       string `json:"id"`
	TenantID string `json:"tenant_id"`
}

func (q *Queries) GetUserByID(ctx context.Context, arg GetUserByIDParams) (CoreUser, error) {
	row := q.db.QueryRow(ctx, getUserByID, arg.ID, arg.TenantID)
	var i CoreUser
	err := row.Scan(
		&i.ID,
		&i.Profile,
		&i.Email,
		&i.CoreRoles,
		&i.CreatedAt,
		&i.TenantID,
		&i.Roles,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, profile, email, core_roles, created_at, tenant_id, roles FROM core_users
WHERE (UPPER(email) LIKE UPPER($3) OR $3 IS NULL)
AND tenant_id = $4::text
ORDER BY created_at
LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit    int32       `json:"limit"`
	Offset   int32       `json:"offset"`
	Like     interface{} `json:"like"`
	TenantID string      `json:"tenant_id"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]CoreUser, error) {
	rows, err := q.db.Query(ctx, listUsers,
		arg.Limit,
		arg.Offset,
		arg.Like,
		arg.TenantID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CoreUser{}
	for rows.Next() {
		var i CoreUser
		if err := rows.Scan(
			&i.ID,
			&i.Profile,
			&i.Email,
			&i.CoreRoles,
			&i.CreatedAt,
			&i.TenantID,
			&i.Roles,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProfile = `-- name: UpdateProfile :one
UPDATE core_users 
SET profile = $1
WHERE id = $2
AND tenant_id = $3::text
RETURNING id
`

type UpdateProfileParams struct {
	Profile  subentity.UserProfile `json:"profile"`
	ID       string                `json:"id"`
	TenantID string                `json:"tenant_id"`
}

func (q *Queries) UpdateProfile(ctx context.Context, arg UpdateProfileParams) (string, error) {
	row := q.db.QueryRow(ctx, updateProfile, arg.Profile, arg.ID, arg.TenantID)
	var id string
	err := row.Scan(&id)
	return id, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE core_users 
SET 
    roles = $2::VARCHAR[],
    profile = jsonb_set(
        profile, 
        '{name}', 
        to_jsonb($3::text), 
        true
    )
WHERE id = $1
AND tenant_id = $4::text
RETURNING id
`

type UpdateUserParams struct {
	ID       string   `json:"id"`
	Roles    []string `json:"roles"`
	Name     string   `json:"name"`
	TenantID string   `json:"tenant_id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (string, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Roles,
		arg.Name,
		arg.TenantID,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: prompt.sql

package repository

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createPrompt = `-- name: CreatePrompt :one
INSERT INTO core_prompts (
  user_id, tenant_id, "name", "content", "tags", "parameters", sample_parameters, "format", "format_instructions"
) VALUES (
  $1, $4::text, 
  $2, 
  $3, 
  $5::varchar[], 
  $6::varchar[],
  $7::jsonb,
  $8::varchar,
  $9::text
)
RETURNING id, name, content, tags, parameters, sample_parameters, format, format_instructions, user_id, tenant_id, created_at, updated_at
`

type CreatePromptParams struct {
	UserID             string      `json:"user_id"`
	Name               string      `json:"name"`
	Content            string      `json:"content"`
	TenantID           string      `json:"tenant_id"`
	Tags               []string    `json:"tags"`
	Parameters         []string    `json:"parameters"`
	SampleParameters   []byte      `json:"sample_parameters"`
	Format             string      `json:"format"`
	FormatInstructions pgtype.Text `json:"format_instructions"`
}

func (q *Queries) CreatePrompt(ctx context.Context, arg CreatePromptParams) (CorePrompt, error) {
	row := q.db.QueryRow(ctx, createPrompt,
		arg.UserID,
		arg.Name,
		arg.Content,
		arg.TenantID,
		arg.Tags,
		arg.Parameters,
		arg.SampleParameters,
		arg.Format,
		arg.FormatInstructions,
	)
	var i CorePrompt
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Content,
		&i.Tags,
		&i.Parameters,
		&i.SampleParameters,
		&i.Format,
		&i.FormatInstructions,
		&i.UserID,
		&i.TenantID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePrompt = `-- name: DeletePrompt :one
DELETE FROM core_prompts
WHERE id = $1 and tenant_id = $2::text
RETURNING id
`

type DeletePromptParams struct {
	ID       uuid.UUID `json:"id"`
	TenantID string    `json:"tenant_id"`
}

func (q *Queries) DeletePrompt(ctx context.Context, arg DeletePromptParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, deletePrompt, arg.ID, arg.TenantID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getPromptByID = `-- name: GetPromptByID :one
SELECT id, name, content, tags, parameters, sample_parameters, format, format_instructions, user_id, tenant_id, created_at, updated_at FROM core_prompts
WHERE id = $1 AND tenant_id = $2::text LIMIT 1
`

type GetPromptByIDParams struct {
	ID       uuid.UUID `json:"id"`
	TenantID string    `json:"tenant_id"`
}

func (q *Queries) GetPromptByID(ctx context.Context, arg GetPromptByIDParams) (CorePrompt, error) {
	row := q.db.QueryRow(ctx, getPromptByID, arg.ID, arg.TenantID)
	var i CorePrompt
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Content,
		&i.Tags,
		&i.Parameters,
		&i.SampleParameters,
		&i.Format,
		&i.FormatInstructions,
		&i.UserID,
		&i.TenantID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPromptByName = `-- name: GetPromptByName :one
SELECT id, name, content, tags, parameters, sample_parameters, format, format_instructions, user_id, tenant_id, created_at, updated_at FROM core_prompts
WHERE name = $1 AND tenant_id = $2
LIMIT 1
`

type GetPromptByNameParams struct {
	Name     string `json:"name"`
	TenantID string `json:"tenant_id"`
}

func (q *Queries) GetPromptByName(ctx context.Context, arg GetPromptByNameParams) (CorePrompt, error) {
	row := q.db.QueryRow(ctx, getPromptByName, arg.Name, arg.TenantID)
	var i CorePrompt
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Content,
		&i.Tags,
		&i.Parameters,
		&i.SampleParameters,
		&i.Format,
		&i.FormatInstructions,
		&i.UserID,
		&i.TenantID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listPrompts = `-- name: ListPrompts :many
SELECT id, name, content, tags, parameters, sample_parameters, format, format_instructions, user_id, tenant_id, created_at, updated_at FROM core_prompts
WHERE tenant_id = $3::text
  AND (UPPER(name) LIKE UPPER($4) OR $4 IS NULL)
  AND (
    $5::varchar[] IS NULL 
    OR 
    ($5::varchar[] && tags)
  )
ORDER BY
  CASE WHEN $6::TEXT = 'name' AND $7::TEXT = 'asc' THEN name END ASC,
  CASE WHEN $6::TEXT = 'name' AND $7::TEXT != 'asc' THEN name END DESC
  ,
  CASE WHEN $6::TEXT = 'content' AND $7::TEXT = 'asc' THEN content END ASC,
  CASE WHEN $6::TEXT = 'content' AND $7::TEXT != 'asc' THEN content END DESC
  ,
  CASE WHEN $6::TEXT = 'tags' AND $7::TEXT = 'asc' THEN tags END ASC,
  CASE WHEN $6::TEXT = 'tags' AND $7::TEXT != 'asc' THEN tags END DESC
  ,
  CASE WHEN $6::TEXT = 'parameters' AND $7::TEXT = 'asc' THEN parameters END ASC,
  CASE WHEN $6::TEXT = 'parameters' AND $7::TEXT != 'asc' THEN parameters END DESC
  
LIMIT $1
OFFSET $2
`

type ListPromptsParams struct {
	Limit    int32       `json:"limit"`
	Offset   int32       `json:"offset"`
	TenantID string      `json:"tenant_id"`
	Like     interface{} `json:"like"`
	Tags     []string    `json:"tags"`
	SortBy   string      `json:"sortBy"`
	Order    string      `json:"order"`
}

func (q *Queries) ListPrompts(ctx context.Context, arg ListPromptsParams) ([]CorePrompt, error) {
	rows, err := q.db.Query(ctx, listPrompts,
		arg.Limit,
		arg.Offset,
		arg.TenantID,
		arg.Like,
		arg.Tags,
		arg.SortBy,
		arg.Order,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CorePrompt{}
	for rows.Next() {
		var i CorePrompt
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Content,
			&i.Tags,
			&i.Parameters,
			&i.SampleParameters,
			&i.Format,
			&i.FormatInstructions,
			&i.UserID,
			&i.TenantID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePrompt = `-- name: UpdatePrompt :one
UPDATE core_prompts 
SET "name" = COALESCE($2, name),
    "content" = COALESCE($3, content),
    "tags" = COALESCE($4::varchar[], tags),
    "parameters" = COALESCE($5::varchar[], parameters),
    "sample_parameters" = COALESCE($6::jsonb, sample_parameters),
    "format" = $7::varchar,
    "format_instructions" = COALESCE($8::text, format_instructions)
WHERE id = $1 AND tenant_id = $9::text
RETURNING id, name, content, tags, parameters, sample_parameters, format, format_instructions, user_id, tenant_id, created_at, updated_at
`

type UpdatePromptParams struct {
	ID                 uuid.UUID   `json:"id"`
	Name               pgtype.Text `json:"name"`
	Content            pgtype.Text `json:"content"`
	Tags               []string    `json:"tags"`
	Parameters         []string    `json:"parameters"`
	SampleParameters   []byte      `json:"sample_parameters"`
	Format             string      `json:"format"`
	FormatInstructions pgtype.Text `json:"format_instructions"`
	TenantID           string      `json:"tenant_id"`
}

func (q *Queries) UpdatePrompt(ctx context.Context, arg UpdatePromptParams) (CorePrompt, error) {
	row := q.db.QueryRow(ctx, updatePrompt,
		arg.ID,
		arg.Name,
		arg.Content,
		arg.Tags,
		arg.Parameters,
		arg.SampleParameters,
		arg.Format,
		arg.FormatInstructions,
		arg.TenantID,
	)
	var i CorePrompt
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Content,
		&i.Tags,
		&i.Parameters,
		&i.SampleParameters,
		&i.Format,
		&i.FormatInstructions,
		&i.UserID,
		&i.TenantID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

// Package core provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package core

import (
	"time"

	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for APITokenStatus.
const (
	APITokenStatusACTIVE  APITokenStatus = "ACTIVE"
	APITokenStatusEXPIRED APITokenStatus = "EXPIRED"
	APITokenStatusREVOKED APITokenStatus = "REVOKED"
)

// Defines values for APITokenAuditLogAction.
const (
	APITokenAuditLogActionCREATED APITokenAuditLogAction = "CREATED"
	APITokenAuditLogActionREVOKED APITokenAuditLogAction = "REVOKED"
	APITokenAuditLogActionUPDATED APITokenAuditLogAction = "UPDATED"
	APITokenAuditLogActionUSED    APITokenAuditLogAction = "USED"
)

// Defines values for UserActionSchemaName.
const (
	DISABLED      UserActionSchemaName = "DISABLED"
	EMAILVERIFIED UserActionSchemaName = "EMAIL_VERIFIED"
)

// APIToken defines model for APIToken.
type APIToken struct {
	// ApplicationName Name of the client application
	ApplicationName string `json:"applicationName"`

	// ClientApplicationId ID of the client application this token belongs to
	ClientApplicationId openapi_types.UUID `json:"clientApplicationId"`

	// CreatedAt Token creation timestamp
	CreatedAt time.Time `json:"createdAt"`

	// CreatedBy User ID of the token creator
	CreatedBy   string             `json:"createdBy"`
	Description *string            `json:"description,omitempty"`
	ExpiresAt   time.Time          `json:"expiresAt"`
	Id          openapi_types.UUID `json:"id"`

	// LastUsedAt Last used timestamp
	LastUsedAt *time.Time `json:"lastUsedAt,omitempty"`

	// LastUsedIp Last used IP address
	LastUsedIp *string `json:"lastUsedIp,omitempty"`
	Name       string  `json:"name"`

	// Revoked Whether this token has been revoked
	Revoked bool `json:"revoked"`

	// RevokedAt Token revoked at timestamp
	RevokedAt *time.Time `json:"revokedAt,omitempty"`

	// RevokedBy User of the token revoker
	RevokedBy *string `json:"revokedBy,omitempty"`

	// RevokedReason Revoked reason
	RevokedReason *string `json:"revokedReason,omitempty"`

	// Scopes Permission scopes for this token
	Scopes *[]string      `json:"scopes"`
	Status APITokenStatus `json:"status"`

	// TokenPrefix First few characters of the token for identification
	TokenPrefix string `json:"tokenPrefix"`

	// UpdatedAt Token last update timestamp
	UpdatedAt time.Time `json:"updatedAt"`
}

// APITokenStatus defines model for APIToken.Status.
type APITokenStatus string

// APITokenAuditLog defines model for APITokenAuditLog.
type APITokenAuditLog struct {
	Action         APITokenAuditLogAction  `json:"action"`
	AdditionalData *map[string]interface{} `json:"additionalData"`
	Id             openapi_types.UUID      `json:"id"`
	IpAddress      *string                 `json:"ipAddress"`
	Timestamp      time.Time               `json:"timestamp"`
	TokenId        openapi_types.UUID      `json:"tokenId"`
	UserAgent      *string                 `json:"userAgent"`
}

// APITokenAuditLogAction defines model for APITokenAuditLog.Action.
type APITokenAuditLogAction string

// APITokenCreated defines model for APITokenCreated.
type APITokenCreated struct {
	ApiToken APIToken `json:"apiToken"`

	// Token The full token value (only returned once upon creation)
	Token string `json:"token"`
}

// APITokenRevoke defines model for APITokenRevoke.
type APITokenRevoke struct {
	Reason string `json:"reason"`
}

// ClientApplication defines model for ClientApplication.
type ClientApplication struct {
	Active      bool               `json:"active"`
	Description string             `json:"description"`
	Id          openapi_types.UUID `json:"id"`
	LastUsed    *time.Time         `json:"lastUsed,omitempty"`
	LastUsedAt  *time.Time         `json:"lastUsedAt,omitempty"`
	Name        string             `json:"name"`

	// TenantId If null, this is a global application managed by SUPER_ADMIN
	TenantId *string `json:"tenantId"`
}

// ColorSchema defines model for ColorSchema.
type ColorSchema struct {
	Accent     *string `json:"accent,omitempty"`
	Background *string `json:"background,omitempty"`
	Info       *string `json:"info,omitempty"`
	Negative   *string `json:"negative,omitempty"`
	Positive   *string `json:"positive,omitempty"`
	Primary    *string `json:"primary,omitempty"`
	Secondary  *string `json:"secondary,omitempty"`
	Tertiary   *string `json:"tertiary,omitempty"`
	Text       *string `json:"text,omitempty"`
	Warning    *string `json:"warning,omitempty"`
}

// ExecutePromptResponse defines model for ExecutePromptResponse.
type ExecutePromptResponse struct {
	Result string `json:"result"`
}

// NewAPIToken defines model for NewAPIToken.
type NewAPIToken struct {
	// ApplicationName Name of the client application
	ApplicationName string `json:"applicationName"`

	// ClientApplicationId ID of the client application this token belongs to
	ClientApplicationId openapi_types.UUID `json:"clientApplicationId"`
	Description         *string            `json:"description,omitempty"`
	ExpiresAt           time.Time          `json:"expiresAt"`
	Name                string             `json:"name"`

	// Scopes Permission scopes for this token
	Scopes *[]string `json:"scopes"`

	// TokenPrefix First few characters of the token for identification
	TokenPrefix string `json:"tokenPrefix"`
}

// NewClientApplication defines model for NewClientApplication.
type NewClientApplication struct {
	Active      bool       `json:"active"`
	Description string     `json:"description"`
	LastUsed    *time.Time `json:"lastUsed,omitempty"`
	Name        string     `json:"name"`
}

// NewRole defines model for NewRole.
type NewRole struct {
	Name string `json:"name"`
}

// NewTenant defines model for NewTenant.
type NewTenant struct {
	AllowPasswordSignUp   bool   `json:"allow_password_sign_up"`
	EnableEmailLinkSignIn bool   `json:"enable_email_link_sign_in"`
	Name                  string `json:"name"`
	Subdomain             string `json:"subdomain"`
}

// NewUser defines model for NewUser.
type NewUser struct {
	Email    string `json:"email"`
	Name     string `json:"name"`
	Password string `json:"password"`
}

// Role defines model for Role.
type Role struct {
	Id   openapi_types.UUID `json:"id"`
	Name string             `json:"name"`
}

// Tenant defines model for Tenant.
type Tenant struct {
	AllowPasswordSignUp   bool               `json:"allow_password_sign_up"`
	EnableEmailLinkSignIn bool               `json:"enable_email_link_sign_in"`
	Id                    openapi_types.UUID `json:"id"`
	Name                  string             `json:"name"`
	Subdomain             string             `json:"subdomain"`
	TenantId              string             `json:"tenant_id"`
}

// TenantFeatures Dynamic feature flags for tenants. Each key represents a feature name and the boolean value indicates if it's enabled
type TenantFeatures map[string]bool

// TenantProfile defines model for TenantProfile.
type TenantProfile struct {
	CompanyName      string      `json:"companyName"`
	DarkColors       ColorSchema `json:"darkColors"`
	DisplayName      string      `json:"displayName"`
	LightColors      ColorSchema `json:"lightColors"`
	StoreRAGDocument *bool       `json:"storeRAGDocument,omitempty"`
	Values           *string     `json:"values,omitempty"`
}

// User defines model for User.
type User struct {
	CreatedAt     *time.Time         `json:"created_at,omitempty"`
	Disabled      *bool              `json:"disabled,omitempty"`
	Email         string             `json:"email"`
	EmailVerified *bool              `json:"email_verified,omitempty"`
	Id            string             `json:"id"`
	Name          string             `json:"name"`
	Profile       *UserProfileSchema `json:"profile,omitempty"`
	Roles         *[]Role            `json:"roles,omitempty"`
}

// UserActionSchema defines model for UserActionSchema.
type UserActionSchema struct {
	Name  UserActionSchemaName `json:"name"`
	Value bool                 `json:"value"`
}

// UserActionSchemaName defines model for UserActionSchema.Name.
type UserActionSchemaName string

// UserProfileSchema defines model for UserProfileSchema.
type UserProfileSchema struct {
	About                *string   `json:"about,omitempty"`
	BackgroundPictureURL *string   `json:"backgroundPictureURL,omitempty"`
	Interests            *[]string `json:"interests,omitempty"`
	Name                 string    `json:"name"`
	PictureURL           *string   `json:"pictureURL,omitempty"`
	Skills               *[]string `json:"skills,omitempty"`
	SocialMedias         *[]string `json:"socialMedias,omitempty"`
	Title                *string   `json:"title,omitempty"`
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: global_config.sql

package repository

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createGlobalConfig = `-- name: CreateGlobalConfig :one
INSERT INTO core_global_configs (
  user_id, "name", "value"
) VALUES (
  $1, $2, $3
)
RETURNING id, name, value, user_id, created_at, updated_at
`

type CreateGlobalConfigParams struct {
	UserID string      `json:"user_id"`
	Name   string      `json:"name"`
	Value  pgtype.Text `json:"value"`
}

func (q *Queries) CreateGlobalConfig(ctx context.Context, arg CreateGlobalConfigParams) (CoreGlobalConfig, error) {
	row := q.db.QueryRow(ctx, createGlobalConfig, arg.UserID, arg.Name, arg.Value)
	var i CoreGlobalConfig
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Value,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteGlobalConfig = `-- name: DeleteGlobalConfig :one
DELETE FROM core_global_configs
WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteGlobalConfig(ctx context.Context, id uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, deleteGlobalConfig, id)
	err := row.Scan(&id)
	return id, err
}

const getGlobalConfigByID = `-- name: GetGlobalConfigByID :one
SELECT id, name, value, user_id, created_at, updated_at FROM core_global_configs
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetGlobalConfigByID(ctx context.Context, id uuid.UUID) (CoreGlobalConfig, error) {
	row := q.db.QueryRow(ctx, getGlobalConfigByID, id)
	var i CoreGlobalConfig
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Value,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getGlobalConfigByName = `-- name: GetGlobalConfigByName :one
SELECT id, name, value, user_id, created_at, updated_at FROM core_global_configs
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetGlobalConfigByName(ctx context.Context, name string) (CoreGlobalConfig, error) {
	row := q.db.QueryRow(ctx, getGlobalConfigByName, name)
	var i CoreGlobalConfig
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Value,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listGlobalConfigs = `-- name: ListGlobalConfigs :many
SELECT id, name, value, user_id, created_at, updated_at FROM core_global_configs
WHERE (UPPER(name) LIKE UPPER($3) OR $3 IS NULL)
ORDER BY
  CASE
            WHEN $4::text = 'asc' and $5::text = 'name' THEN "name"
            WHEN $4::text = 'asc' and $5::text = 'value' THEN "value"
        END ASC,
  CASE
            WHEN (NOT $4::text = 'asc') and $5::text = 'name' THEN "name"
            WHEN (NOT $4::text = 'asc') and $5::text = 'value' THEN "value"
        END DESC
LIMIT $1
OFFSET $2
`

type ListGlobalConfigsParams struct {
	Limit  int32       `json:"limit"`
	Offset int32       `json:"offset"`
	Like   interface{} `json:"like"`
	Order  string      `json:"order"`
	SortBy string      `json:"sortBy"`
}

func (q *Queries) ListGlobalConfigs(ctx context.Context, arg ListGlobalConfigsParams) ([]CoreGlobalConfig, error) {
	rows, err := q.db.Query(ctx, listGlobalConfigs,
		arg.Limit,
		arg.Offset,
		arg.Like,
		arg.Order,
		arg.SortBy,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CoreGlobalConfig{}
	for rows.Next() {
		var i CoreGlobalConfig
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Value,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGlobalConfig = `-- name: UpdateGlobalConfig :one
UPDATE core_global_configs 
SET 
    "name" = $2,
    "value" = $3
WHERE id = $1
RETURNING id
`

type UpdateGlobalConfigParams struct {
	ID    uuid.UUID   `json:"id"`
	Name  string      `json:"name"`
	Value pgtype.Text `json:"value"`
}

func (q *Queries) UpdateGlobalConfig(ctx context.Context, arg UpdateGlobalConfigParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, updateGlobalConfig, arg.ID, arg.Name, arg.Value)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
